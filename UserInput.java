import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

/**
 * @author Gireeshma Reddy
 * @version 1.0
 * @since 2016-07-13
 *
 *        The UserInput class has the main method. It checks for the presence of
 *        arguments when the code is run. In the presence of arguments, it forms
 *        the string from the command line arguments entered by the user.In the
 *        absence of arguments, it opens a GUI using Java Swing. The GUI takes
 *        in the input string from the user. In both the cases, an object of the
 *        Connection class is called which returns the introductory part of the
 *        Wikipedia page relevant to the string entered by the user. This is
 *        shown through the GUI.
 */
public class UserInput {
	JFrame Frame;
	JTextField textEntered;
	JPanel Panel;

	JTextArea wikiResult = new JTextArea(20, 100);

	/**
	 * In the absence of the command line arguments, the constructor is called
	 * which initializes and sets the string values through the GUI.
	 */
	public UserInput() {

		Frame = new JFrame("PLEASE ENTER THE TOPIC");
		Frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		Frame.setSize(100, 100);
		Frame.setLocationRelativeTo(null);

		Panel = new JPanel();
		Frame.add(Panel, BorderLayout.CENTER);

		/* The textEntered variable holds the input entered by the user. */
		textEntered = new JTextField("ENTER THE TOPIC HERE");
		textEntered.setHorizontalAlignment(JTextField.RIGHT);
		textEntered.setEditable(true);

		Font font1 = new Font("SansSerif", Font.BOLD, 20);
		wikiResult.setFont(font1);

		Font font2 = new Font("SansSerif", Font.BOLD, 30);
		textEntered.setFont(font2);
		Frame.add(textEntered, BorderLayout.NORTH);
		/* The submitButton listens for an action from the user. */
		JButton submitButton = new JButton(
				"Get Wikipedia Introduction by clicking here!");

		submitButton.setFont(font1);
		/*
		 * On clicking the submit button, textEntered is checked for the
		 * presence of input from the user
		 */
		submitButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent event) {
				if (!textEntered.getText().isEmpty()) {

					/*
					 * If the user has entered an input, it is passed as a
					 * string to the Connection object i.e. conn and passing the
					 * textEntered string as parameter.
					 */
					String input = (textEntered.getText());
					Connection conn = new Connection();

					String stringOutput = conn.findResult(input);
					/*
					 * The output returned by the method is set in the text
					 * area.
					 */
					wikiResult.setText(stringOutput);

				} else {
					JOptionPane.showMessageDialog(null,
							"Please enter a topic to begin");
				}
			}
		});

		wikiResult.setEditable(false);
		wikiResult.setLineWrap(true);

		JScrollPane scrollArea = new JScrollPane(wikiResult);

		Panel.add(submitButton);
		Panel.add(scrollArea, BorderLayout.CENTER);
		Frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
		Frame.setVisible(true);
	}

	/**
	 * The main method checks if the user has provided command line arguments.
	 * If arguments are present, a string is generated by combining them and
	 * passed through the Connection object findResult method. This prints out
	 * the resultant Wikipedia content through command prompt.
	 * 
	 * In the absence of the command line arguments, the constructor is invoked.
	 * 
	 * @param args
	 *            - The Topic entered by the user through command line
	 *            arguments.
	 */
	public static void main(String[] args) {
		// The if condition checks for the presence of command line arguments.
		if (args.length == 0) {
			// If the arguments are absent, the constructor is invoked.
			new UserInput();
		} else {

			/*
			 * The string inputArgs is used to join the command line arguments
			 * and store the resultant string.
			 */
			String inputArgs = "";
			Connection conn = new Connection();

			/*
			 * The for loop iterates over each of the command line arguments and
			 * stores the resultant string as inputArgs.
			 */
			for (int i = 0; i < args.length; i++) {
				if (i == 0) {
					inputArgs = inputArgs + args[i];
				} else {
					inputArgs = inputArgs + " " + args[i];
				}

			}

			/*
			 * The output is printed by calling the findResult method on the
			 * Connection object i.e. conn and passing the inputArgs string as
			 * parameter.
			 */
			System.out.println(conn.findResult(inputArgs));

		}

	}

}
